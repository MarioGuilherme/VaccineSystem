// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VaccineSystem.Data;

#nullable disable

namespace VaccineSystem.Data.Migrations {
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot {
        protected override void BuildModel(ModelBuilder modelBuilder) {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b => {
                b.Property<string>("Id")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Name")
                    .HasMaxLength(256)
                    .HasColumnType("nvarchar(256)");

                b.Property<string>("NormalizedName")
                    .HasMaxLength(256)
                    .HasColumnType("nvarchar(256)");

                b.HasKey("Id");

                b.HasIndex("NormalizedName")
                    .IsUnique()
                    .HasDatabaseName("RoleNameIndex")
                    .HasFilter("[NormalizedName] IS NOT NULL");

                b.ToTable("AspNetRoles", (string) null);
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b => {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                b.Property<string>("ClaimType")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("ClaimValue")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("RoleId")
                    .IsRequired()
                    .HasColumnType("nvarchar(450)");

                b.HasKey("Id");

                b.HasIndex("RoleId");

                b.ToTable("AspNetRoleClaims", (string) null);
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b => {
                b.Property<string>("Id")
                    .HasColumnType("nvarchar(450)");

                b.Property<int>("AccessFailedCount")
                    .HasColumnType("int");

                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Email")
                    .HasMaxLength(256)
                    .HasColumnType("nvarchar(256)");

                b.Property<bool>("EmailConfirmed")
                    .HasColumnType("bit");

                b.Property<bool>("LockoutEnabled")
                    .HasColumnType("bit");

                b.Property<DateTimeOffset?>("LockoutEnd")
                    .HasColumnType("datetimeoffset");

                b.Property<string>("NormalizedEmail")
                    .HasMaxLength(256)
                    .HasColumnType("nvarchar(256)");

                b.Property<string>("NormalizedUserName")
                    .HasMaxLength(256)
                    .HasColumnType("nvarchar(256)");

                b.Property<string>("PasswordHash")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("PhoneNumber")
                    .HasColumnType("nvarchar(max)");

                b.Property<bool>("PhoneNumberConfirmed")
                    .HasColumnType("bit");

                b.Property<string>("SecurityStamp")
                    .HasColumnType("nvarchar(max)");

                b.Property<bool>("TwoFactorEnabled")
                    .HasColumnType("bit");

                b.Property<string>("UserName")
                    .HasMaxLength(256)
                    .HasColumnType("nvarchar(256)");

                b.HasKey("Id");

                b.HasIndex("NormalizedEmail")
                    .HasDatabaseName("EmailIndex");

                b.HasIndex("NormalizedUserName")
                    .IsUnique()
                    .HasDatabaseName("UserNameIndex")
                    .HasFilter("[NormalizedUserName] IS NOT NULL");

                b.ToTable("AspNetUsers", (string) null);
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b => {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                b.Property<string>("ClaimType")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("ClaimValue")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("UserId")
                    .IsRequired()
                    .HasColumnType("nvarchar(450)");

                b.HasKey("Id");

                b.HasIndex("UserId");

                b.ToTable("AspNetUserClaims", (string) null);
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b => {
                b.Property<string>("LoginProvider")
                    .HasMaxLength(128)
                    .HasColumnType("nvarchar(128)");

                b.Property<string>("ProviderKey")
                    .HasMaxLength(128)
                    .HasColumnType("nvarchar(128)");

                b.Property<string>("ProviderDisplayName")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("UserId")
                    .IsRequired()
                    .HasColumnType("nvarchar(450)");

                b.HasKey("LoginProvider", "ProviderKey");

                b.HasIndex("UserId");

                b.ToTable("AspNetUserLogins", (string) null);
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b => {
                b.Property<string>("UserId")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("RoleId")
                    .HasColumnType("nvarchar(450)");

                b.HasKey("UserId", "RoleId");

                b.HasIndex("RoleId");

                b.ToTable("AspNetUserRoles", (string) null);
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b => {
                b.Property<string>("UserId")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("LoginProvider")
                    .HasMaxLength(128)
                    .HasColumnType("nvarchar(128)");

                b.Property<string>("Name")
                    .HasMaxLength(128)
                    .HasColumnType("nvarchar(128)");

                b.Property<string>("Value")
                    .HasColumnType("nvarchar(max)");

                b.HasKey("UserId", "LoginProvider", "Name");

                b.ToTable("AspNetUserTokens", (string) null);
            });

            modelBuilder.Entity("VaccineSystem.Models.Address", b => {
                b.Property<int>("id_address")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasColumnName("id_address");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id_address"), 1L, 1);

                b.Property<int?>("Personid_person")
                    .HasColumnType("int");

                b.Property<string>("city")
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnType("nvarchar(60)")
                    .HasColumnName("city");

                b.Property<string>("complement")
                    .HasMaxLength(60)
                    .HasColumnType("nvarchar(60)")
                    .HasColumnName("complement");

                b.Property<int>("id_person")
                    .HasColumnType("int")
                    .HasColumnName("id_person");

                b.Property<string>("neighborhood")
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnType("nvarchar(60)")
                    .HasColumnName("neighborhood");

                b.Property<string>("state")
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnType("nvarchar(60)")
                    .HasColumnName("state");

                b.Property<string>("street")
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnType("nvarchar(60)")
                    .HasColumnName("street");

                b.HasKey("id_address");

                b.HasIndex("Personid_person");

                b.ToTable("addresses");
            });

            modelBuilder.Entity("VaccineSystem.Models.Person", b => {
                b.Property<int>("id_person")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasColumnName("id_person");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id_person"), 1L, 1);

                b.Property<DateTime>("birth_date")
                    .HasColumnType("datetime2")
                    .HasColumnName("birth_date");

                b.Property<string>("full_name")
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnType("nvarchar(60)")
                    .HasColumnName("full_name");

                b.Property<string>("sex")
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasColumnType("nvarchar(1)")
                    .HasColumnName("sex");

                b.HasKey("id_person");

                b.ToTable("persons");
            });

            modelBuilder.Entity("VaccineSystem.Models.Vaccine", b => {
                b.Property<int>("id_vaccine")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasColumnName("id_vaccine");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id_vaccine"), 1L, 1);

                b.Property<int?>("Personid_person")
                    .HasColumnType("int");

                b.Property<int>("id_person")
                    .HasColumnType("int")
                    .HasColumnName("id_person");

                b.Property<DateTime>("vaccine_date")
                    .HasColumnType("datetime2")
                    .HasColumnName("vaccine_date");

                b.Property<string>("vaccine_name")
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnType("nvarchar(60)")
                    .HasColumnName("vaccine_name");

                b.Property<decimal>("vaccine_value")
                    .HasColumnType("decimal(18,2)")
                    .HasColumnName("vaccine_value");

                b.HasKey("id_vaccine");

                b.HasIndex("Personid_person");

                b.ToTable("vaccines");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b => {
                b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                    .WithMany()
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b => {
                b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b => {
                b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b => {
                b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                    .WithMany()
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b => {
                b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("VaccineSystem.Models.Address", b => {
                b.HasOne("VaccineSystem.Models.Person", "Person")
                    .WithMany("Address")
                    .HasForeignKey("Personid_person");

                b.Navigation("Person");
            });

            modelBuilder.Entity("VaccineSystem.Models.Vaccine", b => {
                b.HasOne("VaccineSystem.Models.Person", "Person")
                    .WithMany("Vaccine")
                    .HasForeignKey("Personid_person");

                b.Navigation("Person");
            });

            modelBuilder.Entity("VaccineSystem.Models.Person", b => {
                b.Navigation("Address");

                b.Navigation("Vaccine");
            });
#pragma warning restore 612, 618
        }
    }
}